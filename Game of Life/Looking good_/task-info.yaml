type: edu
custom_name: Looking good!
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    import java.io.IOException;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);

            int size = scanner.nextInt();
            //long seed = (long) (Math.random() * (100 - 10 + 1) + 10);
            int numberOfGenerations = (int) (Math.random() * (20 - 10 + 1) + 10);

            GenAlgorithm genAlgorithm = new GenAlgorithm();
            Universe universe = new Universe(genAlgorithm.createGen(size));
            Universe[] generations = new Universe[numberOfGenerations + 1];

            //if (numberOfGenerations > 0) {
                generations[0] = universe;

                for (int i = 1; i < numberOfGenerations + 1; i++) {
                    generations[i] = new Universe(GenAlgorithm.newGen(generations[i - 1].getUniverse()));
                }
            //printOutUniverse(generations[numberOfGenerations]);
            //} else {
             //   printOutUniverse(universe);
            //}

            for (int i = 0; i < generations.length; i++) {
                clearConsole();
                System.out.println("Generation #" + i);
                System.out.println("Alive: " + generations[i].aliveCount());
                printOutUniverse(generations[i]);
                try {
                    Thread.sleep(500);
                }
                catch(InterruptedException ex) {
                    Thread.currentThread().interrupt();
                }
            }
            scanner.close();
            System.exit(0);
        }

        public static void printOutUniverse(Universe universe) {
            for (char[] i: universe.getUniverse()) {
                for (char j: i) {
                    System.out.print(j);
                }
                System.out.println("");
            }
        }

        public static void clearConsole() {

            try {
                if (System.getProperty("os.name").contains("Windows"))
                    new ProcessBuilder("cmd","/c","cls").inheritIO().start().waitFor();
                else
                    Runtime.getRuntime().exec("clear");
            }
            catch (IOException | InterruptedException e) {}
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import life.GameOfLife;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;
    import static org.hyperskill.hstest.testcase.CheckResult.wrong;

    public class GameOfLifeTest extends SwingTest {

        public GameOfLifeTest() {
            super(new GameOfLife());
        }

        @SwingComponent(name = "GenerationLabel")
        JLabelFixture generationLabel;

        @SwingComponent(name = "AliveLabel")
        JLabelFixture aliveLabel;

        @DynamicTest(order = 1)
        CheckResult testWindow() {
            requireVisible(window);
            return correct();
        }

        @DynamicTest(order = 2)
        CheckResult testGenerationLabel() {
            requireEnabled(generationLabel);
            requireVisible(generationLabel);
            return correct();
        }

        @DynamicTest(order = 3)
        CheckResult testAliveLabel() {
            requireEnabled(aliveLabel);
            requireVisible(aliveLabel);
            return correct();
        }

        @DynamicTest(order = 4)
        CheckResult testForInteger() {

            Pattern pattern = Pattern.compile("\\d+");
            Matcher matcher = pattern.matcher(generationLabel.text());

            if (!matcher.find()) {
                return wrong("The 'GenerationLabel' doesn't contain an integer number!");
            }

            matcher = pattern.matcher(aliveLabel.text());

            if (!matcher.find()) {
                return wrong("The 'AliveLabel' doesn't contain an integer number!");
            }

            return correct();
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  learner_created: true
- name: src/life/GenAlgorithm.java
  visible: true
  learner_created: true
- name: src/life/GameOfLife.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/298/implement#comment
status: Failed
feedback:
  message: |-
    Presentation error in test #1

    Window title is empty.
  time: Wed, 18 Aug 2021 17:46:04 UTC
record: -1
